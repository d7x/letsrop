import sys
import os

''' letsROP - Exfiltrate ROP gadgets by a predefined list of gadgets, exclude badchars and reduce noise '''
''' written by d7x '''  
''' https://d7x.promiselabs.net/ '''

'''
..............................................................................
......................................................,:......................
...........................................,,.........;;,.....................
..............................,,:::::::,,:;++:.......,;;,,,,..................
............................:;++******++++++++:......,;;;++;;:................
..........................,;*************+++++:......,;;+++++;................
..........................;****************+++,.......;;;;;;;,................
.........................:***+++++****+++***+,.......,**+++*:.................
.........................;**;;;;;;;;;;;;;;+*+........+******;.................
.........................;*;;++++;;;;;++++;*;.......:*******+,................
........................:*+;;*S%;;;;;;*%?;;++,......:::::::,,.................
........................,+;;;;++;;;;;;+*+;;;+,.....,::::::,...................
..........................,;;;;;;;;;;;;;;;;:,.....,:::::::,...................
...........................,:;;;*???**;;;:,..,,,,,:::::::,....................
.............................,;;;;;;;;;;;::::::::::::::::,....................
........................,,,,,;***++++++*****+;::::::::::,.....................
.....................,,,,::::*******+++*****+;;::::::,,.......................
..................,,,::,,,,,:**********+****+;:::,,...........................
...............,,,::,,,,,,,,:****;;;*********+;;::,...........................
.............,,::,,,,,:::,,,:**;::,,,;********+;;;:,,.........................
............,:,,,,,,,,,,,,,,:::::::;:,;********+;;;::,........................
............,:,,,,:,.......,:,,,,:::,,,+?*******;;;;::,.......................
............,,,,,,,,........,:,,,:;:,,,:?????*?*;;;;;:,.......................
.............,,,,::,.........,,,,,:;:,,:*???????+;;;;;:,......................
............,:;++***,........,,,,,,:;:,:*???????+;;;;;::......................
...........,+*******:........,,,,,,,::,:*???????+;;;;;;:,.....................
............:+******:,,,....,:,,,,,,:;,:;;;;;;::;;;;;;:,......................
.............,;+++;;;;;;:..,:,,,,,,,,;:,,,,,,,,,:;::,,........................
...............:;;;;;;++;,,:,,,,,,,,,;:,,,,,,,,,,,............................
................,;+;+;;:.,,,,,,,,,,,:;:,,,,,,,,,,,,...........................
..................,,,,.....,:,,,,,,,::,,,,,,,,,,,:,,..........................
..........................,,,,,,,,,,,,,,,,,,,,,,,,,:,,........................
..........................,,,,,,,,,,,,,,::,,,,,,,,,,:,,.......................
.........................,:,,,,,,,,,,,:,,,,:,,,,,,,,,,:,,.....................
........................,,,,,,,,,,,,:,,....,,:,,,,,,,,,,:,....................
.......................,,,,,,,,,,,:,,........,,:,,,,,,,,,:,...................
......................,,:,,,,,,,,:,,...........,,:,,,,,,,,:,..................
.....................,,,,,,,,,,:,,...............,,,,,,,,,:,..................
...................,,:,,,,,,,,:,,................,,,,,,,,,:,..................
..................,,:,,,,,,,,:,.................,,,,,,,,,,:,..................
................,,:,,,,,,,,,:,..................,:,,,,,,,,,,..................
..............,,:,,,,,,,,,,,,..................,:,,,,,,,,,,...................
............,,,,,,,,,,,,,,,,..................,:,,,,,,,,,,,...................
..........,,,:,,,,,,,,,,,,,..................,:,,,,,,,,,,:,...................
..........,,,,,,,,,,,,,,:,..................,:,,,,,,,,,,,:,...................
............:;:,,,,,,,,,,..................,::,,,,,,,,,,,,,...................
...........,?%?*++;:::::,...................,,,;::::,,,:::,...................
...........:%%%%SS%%%%%??*:...................:%%%???????%??*:................
...........:%%%*;;*?%%%%%%;...................:%%%?;+*?%%%%%%+................
............,,,,....,,,,,,,....................,,,,....,,,,,,,................
..............................................................................
..............................................................................
'''
# badchars
# badchars_l = ["00", "01", "02", "03", "04"]
badchars_l = ["00", "0d", "0a", "20"]

# storage container - each instr would be a dict with a list of preferred gadgets
# gadget_l = ["pop", "xor", "inc", "dec", "add", "sub", "mov", "xchg"] # sample generic list
gadget_l = ["pop", "neg", "add", "sub", "xor", "inc", "dec", "mov", "xchg", "push", "shl", "shr"] # sample generic list (more prioritized)
# gadget_l = ["pop", "pop ebp", "xor", "inc", "dec", "add", "sub", "mov", "xchg"] # more refined, include pop <r32> for ex. pop ebp
gadget_d = dict.fromkeys(list(gadget_l))
gadget_d = {k:[] for k in gadget_d}
print(gadget_d)

def main():
    # read file
    if len(sys.argv) > 1:
      f = sys.argv[1]
    else:
      f = 'C:\\tools\\rop.txt'
    
    fp = open(f, 'r')
    contents = fp.readlines()

    # exfiltrate categorized list
    for gadget_currentline in contents:
        # print(line)
        # if ': ' not in gadget_currentline: continue  
        if not gadget_currentline.startswith('0x'): continue

        for gadget_search in gadget_l:
            gadget_ = gadget_currentline.split(": ")
            gadget_addr = gadget_[0]
            gadget_instr =  gadget_[1]
            # skip gadgets containing badchars
            # print(gadget_addr)
            # r = any(el in gadget_addr for el in badchars_l) ** might be unreliable, would skip 0x01 10 03 44 or 1001bdca
            # r = any(el in gadget_addr[5:] for el in badchars_l) # ** use for ASLR - might be unreliable, would skip 0x01 10 03 44
            # print(r)
            
            # new method - updated to check on a per-byte basis
            r = badcharInAddr(gadget_addr, badchars_l)
            if r: continue

            # print(gadget_currentline)
            # include gadgets beginning with the current element of the predefined list, exclude non-ret and non-retn
            if gadget_instr.startswith(gadget_search) and '; ret' in gadget_instr:
                # print(gadget_currentline)              
                # ** append duplicate gadgets: 
                # gadget_d[gadget_search].append(gadget_currentline.rstrip())
                
                # ** with no duplicate gadgets:
                if gadget_instr.rstrip() not in str(gadget_d[gadget_search]): gadget_d[gadget_search].append(gadget_currentline.rstrip())
                
    # print all
    # print(gadget_d)

    ## print specific key
    # print(*gadget_d['pop'], sep="\n")
    
    ## Write to file
    WriteGadgetsToFile(gadget_d)

''' ### Check if a gadget contains a badcharacter '''
# 0x10 01 bd ca would be included, 0x10 00 bd ca would be excluded 
def badcharInAddr(gadget_addr, badchars_l):
  r = False
  for badchar in badchars_l:
    addr_ = gadget_addr.replace('0x', '')
    for i in range(0, len(addr_), 2):
      addr_nextbyte = addr_[i:i+2]
      if badchar in addr_nextbyte: 
        r = True
        break
  
  return r

''' ### Write gadgets to file in an organized list, accepts two paramters: 
    1. a gadget dict with each separate gadget as a key 
    2. A filename to write to (default rop_.txt)
    ### '''
def WriteGadgetsToFile(gl, f = 'rop_.txt'):
    fp = open(f, 'w+')
    fp.write("ROP slightly more organized list of gadgets for exploit development, \nbadchars: " + ", ".join(badchars_l) + " **gadgets with badchars are EXCLUDED from this list")
    for gadget in gl.keys():
        # gadget header - {gadget} instructions - like
        gadget_header = f"\n\n{gadget} instructions\n---\n"
        print(gadget_header)
        fp.write(gadget_header)


        print(*gl[gadget], sep="\n")
        fp.write("\n".join(gl[gadget])) # regular list
        # fp.write("\n".join(gl[gadget]).replace(": ", ") #: ")) rop-prepared like i.e. <hex>) #: 

    fp.close()

if __name__ == '__main__':
    main()

